M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
summary(model_out, pars = c("alpha","mu","beta_bg"))
summary(model_out, pars = c("alpha","mu","beta_bg"))$summary
model_out <- sampling(compiled_model,
# include = TRUE
iter =2000,
warmup=1000, #BURN IN
chains =4,
seed = seed,
control = list(max_treedepth = 30,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
summary(model_out, pars = c("alpha","mu","beta_bg"))$summary
model_out <- sampling(compiled_model,
# include = TRUE
iter =2000,
warmup=1000, #BURN IN
chains =4,
seed = seed,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
model_out <- sampling(compiled_model,
# include = TRUE
iter =2000,
warmup=1000, #BURN IN
chains =4,
seed = 125,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
model_out <- sampling(compiled_model,
# include = TRUE
iter =4000,
warmup=2000, #BURN IN
chains =4,
seed =seed,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
View(leukemia)
compiled_model <- stan_model("U:/Documents/repos/menopause_models/R/weibull_model_example.stan")
model_out <- sampling(compiled_model,
# include = TRUE
iter =500,
warmup=250, #BURN IN
chains =1,
seed =seed,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
summary(model_out, pars = c("alpha","mu","beta_bg"))$summary
pairs(model_out, pars = c("alpha","mu","beta_bg"))
model_out <- sampling(compiled_model,
# include = TRUE
iter =1000,
warmup=500, #BURN IN
chains =1,
seed =seed,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
rstan::traceplot(model_out, pars = c("alpha","mu","beta_bg"))
summary(model_out, pars = c("alpha","mu","beta_bg"))$summary
pairs(model_out, pars = c("alpha","mu","beta_bg"))
model_out <- sampling(compiled_model,
# include = TRUE
iter =2000,
warmup=1000, #BURN IN
chains =1,
seed =seed,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
rstan::traceplot(model_out, pars = c("alpha","mu","beta_bg"))
model_out <- sampling(compiled_model,
# include = TRUE
iter =2000,
warmup=1000, #BURN IN
chains =2,
seed =seed,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
rstan::traceplot(model_out, pars = c("alpha","mu","beta_bg"))
pairs(model_out, pars = c("alpha","mu","beta_bg"))
model_out <- sampling(compiled_model,
# include = TRUE
iter =2000,
warmup=1000, #BURN IN
chains =4,
seed =seed,
control = list(max_treedepth = 40,
adapt_delta=0.995),
data = list(
Nobs = Nobs,
Ncen = Ncen,
M_bg = n_X,
yobs = yobs,
ycen = ycen,
Xobs_bg = Xobs,
Xcen_bg = Xcen
))
summary(model_out, pars = c("alpha","mu","beta_bg"))$summary
pairs(model_out, pars = c("alpha","mu","beta_bg"))
rstan::traceplot(model_out, pars = c("alpha","mu","beta_bg"))
library(survival)
library(eha)
library(haven)
library(ggsurvfit)
library(tidyverse)
library(flexsurv)
###
model_dir <- "U:/Documents/repos/menopause_models/R/model/"
results_dir <- "U:/Documents/repos/menopause_models/samples/"
results_dir <- "G:/irena/lfm/samples/"
seed = 1028
## read in the data
dt <- readRDS("./data/pairfam_upto14_cohort3women_meno.rds")
### play around with some prior distributions for the reporting rate:
pr_prior = data.frame(rbeta(1000000, 2, 5)*0.17+0.52)
names(pr_prior) <- "x"
plot(density(pr_prior))
ggplot(data=pr_prior, aes(x=x)) +
geom_density(fill="#378582", alpha=0.5) +
geom_vline(xintercept=mean(pr_prior$x), size=1.25, linetype="dashed",color="black") +
labs(title = "Reporting Rate Prior", subtitle="Mean: 0.79") +
theme(plot.title=element_text(size=20, hjust=0.5),
plot.subtitle = element_text(size=18, hjust=0.5),
axis.text.x = element_text(size=12,angle =45, vjust = 1, hjust = 1),
axis.title=element_text(size=12),
axis.text.y = element_text(size=12))
mean(pr_prior)
View(pr_prior)
mean(pr_prior$x)
### play around with some prior distributions for the reporting rate:
pr_prior = data.frame(rbeta(1000000, 2, 2)*0.17+0.52)
names(pr_prior) <- "x"
plot(density(pr_prior))
ggplot(data=pr_prior, aes(x=x)) +
geom_density(fill="#378582", alpha=0.5) +
geom_vline(xintercept=mean(pr_prior$x), size=1.25, linetype="dashed",color="black") +
labs(title = "Reporting Rate Prior", subtitle="Mean: 0.") +
theme(plot.title=element_text(size=20, hjust=0.5),
plot.subtitle = element_text(size=18, hjust=0.5),
axis.text.x = element_text(size=12,angle =45, vjust = 1, hjust = 1),
axis.title=element_text(size=12),
axis.text.y = element_text(size=12))
names(pr_prior) <- "x"
mean(pr_prior$x)
library(tidyverse)
library(haven)
library(rstan)
library(bayesplot)
library(stringr)
library(reshape2)
seed = 823
### play around with some prior distributions for the reporting rate:
set.seed(1234)
pr_prior = data.frame(rbeta(10000, 2, 2)*0.17+0.52)
names(pr_prior) <- "x"
plot(density(pr_prior))
mean(pr_prior$x)
View(pr_prior)
ggplot(data=pr_prior, aes(x=x)) +
geom_density(fill="#378582", alpha=0.5) +
geom_vline(xintercept=mean(pr_prior$x), size=1.25, linetype="dashed",color="black") +
labs(title = "Reporting Rate Prior", subtitle="Mean: 0.61") +
theme(plot.title=element_text(size=20, hjust=0.5),
plot.subtitle = element_text(size=18, hjust=0.5),
axis.text.x = element_text(size=12,angle =45, vjust = 1, hjust = 1),
axis.title=element_text(size=12),
axis.text.y = element_text(size=12))
### play around with some prior distributions for the reporting rate:
set.seed(1234)
pr_prior = data.frame(rbeta(10000, 2, 2)*0.14+0.52)
names(pr_prior) <- "x"
plot(density(pr_prior))
mean(pr_prior$x)
ggplot(data=pr_prior, aes(x=x)) +
geom_density(fill="#378582", alpha=0.5) +
geom_vline(xintercept=mean(pr_prior$x), size=1.25, linetype="dashed",color="black") +
labs(title = "Reporting Rate Prior", subtitle="Mean: 0.59") +
theme(plot.title=element_text(size=20, hjust=0.5),
plot.subtitle = element_text(size=18, hjust=0.5),
axis.text.x = element_text(size=12,angle =45, vjust = 1, hjust = 1),
axis.title=element_text(size=12),
axis.text.y = element_text(size=12))
ggplot(data=pr_prior, aes(x=x)) +
geom_density(fill="#378582", alpha=0.5) +
geom_vline(xintercept=mean(pr_prior$x), size=1.25, linetype="dashed",color="black") +
labs(title = "Reporting Rate Prior", subtitle="Mean: 0.59 (41% underreporting)") +
theme(plot.title=element_text(size=20, hjust=0.5),
plot.subtitle = element_text(size=18, hjust=0.5),
axis.text.x = element_text(size=12,angle =45, vjust = 1, hjust = 1),
axis.title=element_text(size=12),
axis.text.y = element_text(size=12))
ggplot(data=pr_prior, aes(x=x)) +
geom_density(fill="#378582", alpha=0.5) +
geom_vline(xintercept=mean(pr_prior$x), size=1.25, linetype="dashed",color="black") +
labs(title = "Reporting Rate Prior", subtitle="Mean: 0.59 (41% underreporting)",
x="Probability") +
theme(plot.title=element_text(size=20, hjust=0.5),
plot.subtitle = element_text(size=18, hjust=0.5),
axis.text.x = element_text(size=12,angle =45, vjust = 1, hjust = 1),
axis.title=element_text(size=12),
axis.text.y = element_text(size=12))
setwd("U:/Documents/repos/uncertainty_quantification/")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(rstan)
library(reshape2)
seed = 12125
setwd("U:/Documents/repos/uncertainty_quantification/")
## set up the directories to where these files are stored locally
model_dir <- paste0(getwd(),"/R/model/")
results_dir <- paste0(getwd(),"/R/model/samples/pcbs_2022/2024/gaza/")
## get the sex-specific age distributions
pi_x_moh <- readRDS("data/pi_x_moh_2024.rds")
pi_x_moh <- pi_x_moh[pi_x_moh$sex!="t",]
## reshape the age distributions for the shape that we need for the model
pi_x= spread(pi_x_moh[,c("sex", "age", "pi_x_mean")], key=age, value=pi_x_mean) ## means of the age distributions
pi_sds= spread(pi_x_moh[,c("sex", "age", "pi_x_sd")], key=age, value=pi_x_sd) ## uncertainty with the age distributions
## for the model, we we want E(log(theta)) and sd(log(theta)), so apply Delta method to the means and sds:
pi_mu = log(pi_x[,-1])
pi_sd = pi_sds[,-1]/pi_x[,-1]
## read in exposure data:
master_forecast_dt <- readRDS("R/lc/data_plus_forecasts_v2.rds")
pcbs_exp  <- master_forecast_dt[master_forecast_dt$region=="Gaza Strip"&master_forecast_dt$year==2024&master_forecast_dt$sex%in%c("m", "f")&master_forecast_dt$source=="pcbs",]
## number of exposures by age
E_x = spread(pcbs_exp[,c("sex", "age","pop")], key=age, value=pop)
## exposures by age
E_age =colSums(E_x[,-1])
## get total exposures
E = sum(rowSums(E_x[,-1]))
## reshape the forecasted baseline mortality as well
pcbs_mx<-  master_forecast_dt[master_forecast_dt$region=="Gaza Strip"&master_forecast_dt$year==2024&master_forecast_dt$sex%in%c("m", "f")&master_forecast_dt$source=="lc_pcbs_2022",]
D_x_pcbs= spread(pcbs_mx[,c("sex", "age","mx_noc")], key=age, value=mx_noc)
## age-sex specific mortality rates
mu_x_pcbs <-  (D_x_pcbs[,-1])/E_x[,-1]
## age specific mortality
mu_age_pcbs <- colSums(D_x_pcbs[,-1])/E_age
### set the reported death toll: for Gaza 2024, this number is 23719
R =23719
## total number of sexes
S = nrow(mu_x_pcbs)
## total number of age groups
X = ncol(mu_x_pcbs)
## age groups
x <- as.numeric(colnames(mu_x_pcbs))
## compile the model
compiled_model <- stan_model(paste0(model_dir, "bmmr_coverage_intervals.stan"))
## run the model
model_out <- sampling(compiled_model,
iter =100,
warmup=50, #BURN IN
chains =1,
seed = seed,
control = list(max_treedepth = 60,
adapt_delta=0.85),
data = list(
mu_x_noc = mu_x_pcbs,
mu_age_noc = mu_age_pcbs,
E_x = E_x[,-1],
E_age = E_age,
pi_x_hat = pi_mu,
pi_sd = pi_sd,
R = R,
S = S,
X= X))
## compile the model
compiled_model <- stan_model(paste0(model_dir, "bmmr_coverage_intervals.stan"))
## run the model
model_out <- sampling(compiled_model,
iter =100,
warmup=50, #BURN IN
chains =1,
seed = seed,
control = list(max_treedepth = 60,
adapt_delta=0.85),
data = list(
mu_x_noc = mu_x_pcbs,
mu_age_noc = mu_age_pcbs,
E_x = E_x[,-1],
E_age = E_age,
pi_x_hat = pi_mu,
pi_sd = pi_sd,
R = R,
S = S,
X= X))
## read in samples
# file_names <- c("moh_samples_1", "moh_samples_2", "moh_samples_3", "moh_samples_4")
# model_out <- read_stan_csv(paste0(results_dir, file_names,".csv"))
### extract the model-generated mortality distributions (incl WPP deaths)
mu_x_total = rstan::extract(model_out, pars=c("mu_x_total"))$mu_x_total
## mortality over sexes (only age specific )
mu_age_total =  rstan::extract(model_out, pars=c("mu_age_total"))$mu_age_total
## this is a 4000 (iterations) x 2 (sex) x 18 (age groups) array
## we can get 4000 le0 estimates using the following code:
lifetable_m  <- list()
lifetable_f  <- list()
lifetable_t <- list()
x <- pi_x_oct26$age[1:18]
## read in samples
# file_names <- c("moh_samples_1", "moh_samples_2", "moh_samples_3", "moh_samples_4")
# model_out <- read_stan_csv(paste0(results_dir, file_names,".csv"))
### extract the model-generated mortality distributions (incl WPP deaths)
mu_x_total = rstan::extract(model_out, pars=c("mu_x_total"))$mu_x_total
## mortality over sexes (only age specific )
mu_age_total =  rstan::extract(model_out, pars=c("mu_age_total"))$mu_age_total
## this is a 4000 (iterations) x 2 (sex) x 18 (age groups) array
## we can get 4000 le0 estimates using the following code:
lifetable_m  <- list()
lifetable_f  <- list()
lifetable_t <- list()
num_iter <- dim(mu_x_total)[1] ## grab the number of MCMC iterations
## alternative: if we don't want to use all of the samples, we can just use a random sample of iterations
set.seed(233)
ran_iter <- sample(c(1:num_iter), 1000, replace=FALSE)
num_iter <- dim(mu_x_total)[1]
num_iter
results_dir
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(rstan)
library(reshape2)
seed = 12125
setwd("U:/Documents/repos/uncertainty_quantification/")
## set up the directories to where these files are stored locally
model_dir <- paste0(getwd(),"/R/model/")
results_dir <- paste0(getwd(),"/R/model/samples/pcbs_2019/2024/gaza/")
## read in samples ()
file_names <- c("moh_samples_1", "moh_samples_2", "moh_samples_3", "moh_samples_4")
model_out <- read_stan_csv(paste0(results_dir, file_names,".csv"))
### extract the model-generated mortality distributions (incl WPP deaths)
mu_x_total = rstan::extract(model_out, pars=c("mu_x_total"))$mu_x_total
## mortality over sexes (only age specific )
mu_age_total =  rstan::extract(model_out, pars=c("mu_age_total"))$mu_age_total
## this is a 4000 (iterations) x 2 (sex) x 18 (age groups) array
## we can get 4000 le0 estimates using the following code:
lifetable_m  <- list()
lifetable_f  <- list()
lifetable_t <- list()
num_iter <- dim(mu_x_total)[1] ## grab the number of MCMC iterations
## alternative: if we don't want to use all of the samples, we can just use a random sample of iterations
set.seed(233)
ran_iter <- sample(c(1:num_iter), 1000, replace=FALSE)
## this should now be an array with dimension ran_iter x 2 x 17
mu_x_subset <- mu_x_total[ran_iter,,]
mu_age_subset <- mu_age_total[ran_iter,]
## get estimated life expectancies from the life table calculations
for(i in 1:1000){
lifetable_f[[i]] <- lifetable.mx(x, t(mu_x_subset[i, 1,]), sex="f")  # get life expectancy for women
lifetable_m[[i]] <- lifetable.mx(x, t(mu_x_subset[i,2,]))# get life expectancy for men
lifetable_t[[i]] <- lifetable.mx(x, t(mu_age_subset[i,]))
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(rstan)
library(reshape2)
seed = 12125
setwd("U:/Documents/repos/uncertainty_quantification/")
## set up the directories to where these files are stored locally
model_dir <- paste0(getwd(),"/R/model/")
results_dir <- paste0(getwd(),"/R/model/samples/pcbs_2019/2024/gaza/")
source("R/0_setup.R")
## read in samples ()
file_names <- c("moh_samples_1", "moh_samples_2", "moh_samples_3", "moh_samples_4")
model_out <- read_stan_csv(paste0(results_dir, file_names,".csv"))
### extract the model-generated mortality distributions (incl WPP deaths)
mu_x_total = rstan::extract(model_out, pars=c("mu_x_total"))$mu_x_total
## mortality over sexes (only age specific )
mu_age_total =  rstan::extract(model_out, pars=c("mu_age_total"))$mu_age_total
## this is a 4000 (iterations) x 2 (sex) x 18 (age groups) array
## we can get 4000 le0 estimates using the following code:
lifetable_m  <- list()
lifetable_f  <- list()
lifetable_t <- list()
num_iter <- dim(mu_x_total)[1] ## grab the number of MCMC iterations
## alternative: if we don't want to use all of the samples, we can just use a random sample of iterations
set.seed(233)
ran_iter <- sample(c(1:num_iter), 1000, replace=FALSE)
## this should now be an array with dimension ran_iter x 2 x 17
mu_x_subset <- mu_x_total[ran_iter,,]
mu_age_subset <- mu_age_total[ran_iter,]
## get estimated life expectancies from the life table calculations
for(i in 1:1000){
lifetable_f[[i]] <- lifetable.mx(x, t(mu_x_subset[i, 1,]), sex="f")  # get life expectancy for women
lifetable_m[[i]] <- lifetable.mx(x, t(mu_x_subset[i,2,]))# get life expectancy for men
lifetable_t[[i]] <- lifetable.mx(x, t(mu_age_subset[i,]))
}
## get life expectancy tables into a dataset
all_lifetable_f <- Reduce(rbind,lifetable_f)
all_lifetable_m <- Reduce(rbind,lifetable_m)
all_lifetable_t <- Reduce(rbind,lifetable_t)
num_iter <- dim(mu_x_total)[1]
## read in samples ()
file_names <- c("moh_samples_1", "moh_samples_2", "moh_samples_3", "moh_samples_4")
model_out <- read_stan_csv(paste0(results_dir, file_names,".csv"))
### extract the model-generated mortality distributions (incl WPP deaths)
mu_x_total = rstan::extract(model_out, pars=c("mu_x_total"))$mu_x_total
## mortality over sexes (only age specific )
mu_age_total =  rstan::extract(model_out, pars=c("mu_age_total"))$mu_age_total
## this is a 4000 (iterations) x 2 (sex) x 18 (age groups) array
num_iter <- dim(mu_x_total)[1] ## grab the number of MCMC iterations
## get 1,000 random samples of the model:
set.seed(233)
ran_iter <- sample(c(1:num_iter), 1000, replace=FALSE)
## this should now be an array with dimension ran_iter x 2 x 17
mu_x_subset <- mu_x_total[ran_iter,,]
mu_age_subset <- mu_age_total[ran_iter,]
## get estimated life expectancies from the life table calculations
lifetable_f  <- list()
for(i in 1:1000){
lifetable_f[[i]] <- lifetable.mx(x, t(mu_x_subset[i, 1,]), sex="f")  # get life expectancy for women
}
## get life expectancy tables into a dataset
all_lifetable_f <- Reduce(rbind,lifetable_f)
## read in samples ()
file_names <- c("moh_samples_1", "moh_samples_2", "moh_samples_3", "moh_samples_4")
model_out <- read_stan_csv(paste0(results_dir, file_names,".csv"))
### extract the model-generated mortality distributions (incl WPP deaths)
mu_x_total = rstan::extract(model_out, pars=c("mu_x_total"))$mu_x_total
## mortality over sexes (only age specific )
mu_age_total =  rstan::extract(model_out, pars=c("mu_age_total"))$mu_age_total
## this is a 4000 (iterations) x 2 (sex) x 18 (age groups) array
num_iter <- dim(mu_x_total)[1] ## grab the number of MCMC iterations
## get 10 random samples of the model:
set.seed(233)
ran_iter <- sample(c(1:num_iter), 10, replace=FALSE)
## this should now be an array with dimension ran_iter x 2 x 17
mu_x_subset <- mu_x_total[ran_iter,,]
mu_age_subset <- mu_age_total[ran_iter,]
## get estimated life expectancies from the life table calculations
lifetable_f  <- list()
for(i in 1:10){
lifetable_f[[i]] <- lifetable.mx(x, t(mu_x_subset[i, 1,]), sex="f")  # get life expectancy for women
}
## get life expectancy tables into a dataset
all_lifetable_f <- Reduce(rbind,lifetable_f)
